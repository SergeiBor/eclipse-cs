<?xml version="1.0" encoding="UTF-8"?>
<checkstyle-metadata file-format-version="1.0.0">

	<rule-group-metadata name="Javadoc Comments">

	    <rule-metadata 
	        name="Type Javadoc"
	        classname="com.puppycrawl.tools.checkstyle.checks.JavadocTypeCheck"
	        default-severity="Warning">
	        <description>Checks Javadoc comments for class and interface definitions.</description>
	        <property-metadata 
	            name="scope" 
	            datatype="SingleSelect" 
	            default-value="private">
	            <description>Visibility scope where Javadoc comments are checked.</description>
	            <enumeration>
	                <property-value-option value="nothing"/>
	                <property-value-option value="public"/>
	                <property-value-option value="protected"/>
	                <property-value-option value="package"/>
	                <property-value-option value="private"/>
	                <property-value-option value="anoninner"/>
	            </enumeration>
	        </property-metadata>
	        <property-metadata 
	            name="authorFormat" 
	            datatype="String" 
	            default-value="">
	            <description>Pattern for @author tag.</description>
	        </property-metadata>
	        <property-metadata 
	            name="versionFormat" 
	            datatype="String" 
	            default-value="">
	            <description>Pattern for @version tag.</description>
	        </property-metadata>
	    </rule-metadata>

	    <rule-metadata 
	        name="Method Javadoc"
	        classname="com.puppycrawl.tools.checkstyle.checks.JavadocMethodCheck"
	        default-severity="Warning">
	        <description>Checks to ensure that the following tags exist (if required): @return, @param, @throws or @exception, @see or {@inheritDoc}.</description>
	        <property-metadata 
	            name="scope" 
	            datatype="SingleSelect" 
	            default-value="private">
	            <description>Visibility scope where Javadoc comments are checked.</description>
	            <enumeration>
	                <property-value-option value="nothing"/>
	                <property-value-option value="public"/>
	                <property-value-option value="protected"/>
	                <property-value-option value="package"/>
	                <property-value-option value="private"/>
	                <property-value-option value="anoninner"/>
	            </enumeration>
	        </property-metadata>
	        <property-metadata 
	            name="allowUndeclaredRTE" 
	            datatype="Boolean" 
	            default-value="false">
	            <description>Whether to allow documented exceptions that are not declared if they are a subclass of java.lang.RuntimeException.</description>
	        </property-metadata>
	    </rule-metadata>
	    <rule-metadata 
	        name="Variable Javadoc"
	        classname="com.puppycrawl.tools.checkstyle.checks.JavadocVariableCheck"
	        default-severity="Warning">
	        <description>Checks that variables have Javadoc comments.</description>
	        <property-metadata 
	            name="scope" 
	            datatype="SingleSelect" 
	            default-value="private">
	            <description>Visibility scope where Javadoc comments are checked.</description>
	            <enumeration>
	                <property-value-option value="nothing"/>
	                <property-value-option value="public"/>
	                <property-value-option value="protected"/>
	                <property-value-option value="package"/>
	                <property-value-option value="private"/>
	                <property-value-option value="anoninner"/>
	            </enumeration>
	        </property-metadata>
	    </rule-metadata>
	</rule-group-metadata>

	<rule-group-metadata name="Naming Conventions">
	    <rule-metadata 
	        name="Constant Names"
	        classname="com.puppycrawl.tools.checkstyle.checks.ConstantNameCheck"
	        default-severity="Warning">
	        <description>Checks that constents (static final fields) variables follow naming convention.</description>
	        <property-metadata 
	            name="format" 
	            datatype="String" 
	            default-value="^[A-Z](_?[A-Z0-9]+)*$">
	            <description>Regular expression defining required naming pattern.</description>
	        </property-metadata>
	    </rule-metadata>
	    <rule-metadata 
	        name="Local Final Variable Names"
	        classname="com.puppycrawl.tools.checkstyle.checks.LocalFinalVariableNameCheck"
	        default-severity="Warning">
	        <description>Checks that local final variables follow naming convention.</description>
	        <property-metadata 
	            name="format" 
	            datatype="String" 
	            default-value="^[a-z][a-zA-Z0-9]*$">
	            <description>Regular expression defining required naming pattern.</description>
	        </property-metadata>
	    </rule-metadata>
	    <rule-metadata 
	        name="Local Variable Names"
	        classname="com.puppycrawl.tools.checkstyle.checks.LocalVariableNameCheck"
	        default-severity="Warning">
	        <description>Checks that local variables follow naming convention.</description>
	        <property-metadata 
	            name="format" 
	            datatype="String" 
	            default-value="^[a-z][a-zA-Z0-9]*$">
	            <description>Regular expression defining required naming pattern.</description>
	        </property-metadata>
	    </rule-metadata>
	    <rule-metadata 
	        name="Instance Variable Names"
	        classname="com.puppycrawl.tools.checkstyle.checks.MemberNameCheck"
	        default-severity="Warning">
	        <description>Checks that instance variables (non-static fields) follow naming convention.</description>
	        <property-metadata 
	            name="format" 
	            datatype="String" 
	            default-value="^[a-z][a-zA-Z0-9]*$">
	            <description>Regular expression defining required naming pattern.</description>
	        </property-metadata>
	    </rule-metadata>
	    <rule-metadata 
	        name="Method Names"
	        classname="com.puppycrawl.tools.checkstyle.checks.MethodNameCheck"
	        default-severity="Warning">
	        <description>Checks that method names follow naming convention.</description>
	        <property-metadata 
	            name="format" 
	            datatype="String" 
	            default-value="^[a-z][a-zA-Z0-9]*$">
	            <description>Regular expression defining required naming pattern.</description>
	        </property-metadata>
	    </rule-metadata>
	    <rule-metadata 
	        name="Package Names"
	        classname="com.puppycrawl.tools.checkstyle.checks.PackageNameCheck"
	        default-severity="Warning">
	        <description>Checks that package names follow naming convention.</description>
	        <property-metadata 
	            name="format" 
	            datatype="String" 
	            default-value="^[a-z]+(\.[a-zA-Z_][a-zA-Z0-9_]*)*$">
	            <description>Regular expression defining required naming pattern.</description>
	        </property-metadata>
	    </rule-metadata>
	    <rule-metadata 
	        name="Parameter Names"
	        classname="com.puppycrawl.tools.checkstyle.checks.ParameterNameCheck"
	        default-severity="Warning">
	        <description>Checks that parameter names follow naming convention.</description>
	        <property-metadata 
	            name="format" 
	            datatype="String" 
	            default-value="^[a-z][a-zA-Z0-9]*$">
	            <description>Regular expression defining required naming pattern.</description>
	        </property-metadata>
	    </rule-metadata>
	    <rule-metadata 
	        name="Static Variable Names"
	        classname="com.puppycrawl.tools.checkstyle.checks.StaticVariableNameCheck"
	        default-severity="Warning">
	        <description>Checks that static variables (static, non-final fields) follow naming convention.</description>
	        <property-metadata 
	            name="format" 
	            datatype="String" 
	            default-value="^[a-z][a-zA-Z0-9]*$">
	            <description>Regular expression defining required naming pattern.</description>
	        </property-metadata>
	    </rule-metadata>
	    <rule-metadata 
	        name="Type Names"
	        classname="com.puppycrawl.tools.checkstyle.checks.TypeNameCheck"
	        default-severity="Warning">
	        <description>Checks that class names follow naming convention.</description>
	        <property-metadata 
	            name="format" 
	            datatype="String" 
	            default-value="^[A-Z][a-zA-Z0-9]*$">
	            <description>Regular expression defining required naming pattern.</description>
	        </property-metadata>
	        <property-metadata
	            name="tokens" 
	            datatype="MultiCheck"
	            default-value="CLASS_DEF, INTERFACE_DEF">
	            <description>Tokens to check.</description>
	            <enumeration>
	                <property-value-option value="CLASS_DEF"/>
	                <property-value-option value="INTERFACE_DEF"/>
	            </enumeration>
	        </property-metadata>
	    </rule-metadata>
	</rule-group-metadata>

    <!--
	<rule-group-metadata name="Headers">
	</rule-group-metadata>
	-->

	<rule-group-metadata name="Imports">
	
	    <rule-metadata 
	        name="Avoid Star (Demand) Imports"
	        classname="com.puppycrawl.tools.checkstyle.checks.AvoidStarImportCheck"
	        default-severity="Warning">
	        <description>Checks for use of demand import statements.</description>
	    </rule-metadata>
	    
	    <rule-metadata 
	        name="Illegal Imports"
	        classname="com.puppycrawl.tools.checkstyle.checks.IllegalImportCheck"
	        default-severity="Warning">
	        <description>Checks for imports from a set of illegal packages.</description>
	        <property-metadata
	            name="illegalPkgs" 
	            datatype="String"
	            default-value="sun">
	            <description>Comma (',') seperated list of illegal packages.</description>
	        </property-metadata>
	    </rule-metadata>
	
	    <rule-metadata 
	        name="Redundant Imports"
	        classname="com.puppycrawl.tools.checkstyle.checks.RedundantImportCheck"
	        default-severity="Warning">
	        <description>Checks for redundant import statements. An import statement is considered redundant if: 1) It is a duplicate of another import. This is, when a class is imported more than once; or 2) The class imported is from the java.lang package, e.g. importing java.lang.String; or 3) The class imported is from the same package. </description>
	    </rule-metadata>
	
	    <rule-metadata 
	        name="Unused Imports"
	        classname="com.puppycrawl.tools.checkstyle.checks.UnusedImportsCheck"
	        default-severity="Warning">
	        <description>Checks for unused import statements.</description>
	    </rule-metadata>
	    
	</rule-group-metadata>

	<rule-group-metadata name="Size Violations">
	
	    <rule-metadata 
	        name="Maximum File Length"
	        classname="com.puppycrawl.tools.checkstyle.checks.FileLengthCheck"
	        default-severity="Warning">
	            <description>Checks for source files that exceed the configured maximum length.</description>
	        <property-metadata 
	            name="max" 
	            datatype="Integer" 
	            default-value="1500">
	            <description>Maximum number of lines allowed.</description>
	        </property-metadata>
	    </rule-metadata>
	
	    <rule-metadata 
	        name="Maximum Method Length"
	        classname="com.puppycrawl.tools.checkstyle.checks.MethodLengthCheck"
	        default-severity="Warning">
	            <description>Checks for methods that exceed the configured maximum length.</description>
	        <property-metadata 
	            name="max" 
	            datatype="Integer" 
	            default-value="150">
	            <description>Maximum number of lines allowed.</description>
	        </property-metadata>
	    </rule-metadata>
	
	    <rule-metadata 
	        name="Maximum Line Length"
	        classname="com.puppycrawl.tools.checkstyle.checks.LineLengthCheck"
	        default-severity="Warning">
	            <description>Checks for lines that exceed the configured maximum length.</description>
	        <property-metadata 
	            name="ignorePattern" 
	            datatype="String" 
	            default-value="^$">
	            <description>Pattern for lines to ignore.</description>
	        </property-metadata>
	        <property-metadata 
	            name="max" 
	            datatype="Integer" 
	            default-value="80">
	            <description>Maximum allowed line length.</description>
	        </property-metadata>
	        <property-metadata 
	            name="tabWidth" 
	            datatype="Integer" 
	            default-value="4">
	            <description>Number of characters to count for each tab character.</description>
	        </property-metadata>
	    </rule-metadata>
	
	    <rule-metadata 
	        name="Maximum Parameters"
	        classname="com.puppycrawl.tools.checkstyle.checks.ParameterNumberCheck"
	        default-severity="Warning">
	            <description>Checks the number of parameters of a method or constructor.</description>
	        <property-metadata 
	            name="tokens" 
	            datatype="MultiCheck" 
	            default-value="METHOD_DEF, CTOR_DEF">
	            <description>Tokens to check.</description>
	            <enumeration>
	                <property-value-option value="METHOD_DEF"/>
	                <property-value-option value="CTOR_DEF"/>
	            </enumeration>
	        </property-metadata>
	        <property-metadata 
	            name="max" 
	            datatype="Integer" 
	            default-value="7">
	            <description>Maximum allowed parameters.</description>
	        </property-metadata>
	    </rule-metadata>
	    
	</rule-group-metadata>

	<rule-group-metadata name="Whitespace">
	    <rule-metadata 
	        name="No Whitespace After"
	        classname="com.puppycrawl.tools.checkstyle.checks.NoWhitespaceAfterCheck"
	        default-severity="Warning">
	        <description>Checks that there is no whitespace after a token. More specifically, it checks that it is not followed by whitespace, or (if linebreaks are allowed) all characters on the line after are whitespace.</description>
	        <property-metadata 
	            name="allowLineBreaks" 
	            datatype="Boolean" 
	            default-value="true">
	            <description>Whether whitespace is allowed if the token is at a linebreak.</description>
	        </property-metadata>
	        <property-metadata 
	            name="tokens" 
	            datatype="MultiCheck" 
	            default-value="ARRAY_INIT, BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS, UNARY_PLUS">
	            <description>Tokens to check.</description>
	            <enumeration>
	                <property-value-option value="ARRAY_INIT"/>
	                <property-value-option value="BNOT"/>
	                <property-value-option value="DEC"/>
	                <property-value-option value="DOT"/>
	                <property-value-option value="INC"/>
	                <property-value-option value="LNOT"/>
	                <property-value-option value="UNARY_MINUS"/>
	                <property-value-option value="UNARY_PLUS"/>
	            </enumeration>
	        </property-metadata>
	    </rule-metadata>
	    <rule-metadata 
	        name="No Whitespace Before"
	        classname="com.puppycrawl.tools.checkstyle.checks.NoWhitespaceBeforeCheck"
	        default-severity="Warning">
	        <description>Checks that there is no whitespace before a token. More specifically, it checks that it is not preceded with whitespace, or (if linebreaks are allowed) all characters on the line before are whitespace.</description>
	        <property-metadata 
	            name="allowLineBreaks" 
	            datatype="Boolean" 
	            default-value="true">
	            <description>Whether whitespace is allowed if the token is at a linebreak.</description>
	        </property-metadata>
	        <property-metadata 
	            name="tokens" 
	            datatype="MultiCheck" 
	            default-value="SEMI, POST_DEC, POST_INC">
	            <description>Tokens to check.</description>
	            <enumeration>
	                <property-value-option value="SEMI"/>
	                <property-value-option value="DOT"/>
	                <property-value-option value="POST_DEC"/>
	                <property-value-option value="POST_INC"/>
	            </enumeration>
	        </property-metadata>
	    </rule-metadata>
	    <rule-metadata 
	        name="Operator Wrap"
	        classname="com.puppycrawl.tools.checkstyle.checks.OperatorWrapCheck"
	        default-severity="Warning">
	        <description>Checks the policy on how to wrap lines on operators.</description>
	        <property-metadata 
	            name="option" 
	            datatype="SingleSelect" 
	            default-value="nl">
	            <description>Policy on how to wrap lines.</description>
	            <enumeration>
	                <property-value-option value="eol"/>
	                <property-value-option value="nl"/>
	            </enumeration>
	        </property-metadata>
	        <property-metadata 
	            name="tokens" 
	            datatype="MultiCheck" 
	            default-value="BAND, BOR, BSR, BXOR, COLON, DIV, EQUAL, GE, GT, LAND, LE, LITERAL_INSTANCEOF, LOR, LT, MINUS, MOD, NOT_EQUAL, PLUS, QUESTION, SL, SR, STAR">
	            <description>Tokens to check.</description>
	            <enumeration>
	                <property-value-option value="ASSIGN"/>
	                <property-value-option value="BAND"/>
	                <property-value-option value="BAND_ASSIGN"/>
	                <property-value-option value="BOR"/>
	                <property-value-option value="BOR_ASSIGN"/>
	                <property-value-option value="BSR"/>
	                <property-value-option value="BSR_ASSIGN"/>
	                <property-value-option value="BXOR"/>
	                <property-value-option value="BXOR_ASSIGN"/>
	                <property-value-option value="COLON"/>
	                <property-value-option value="DIV"/>
	                <property-value-option value="DIV_ASSIGN"/>
	                <property-value-option value="EQUAL"/>
	                <property-value-option value="GE"/>
	                <property-value-option value="GT"/>
	                <property-value-option value="LAND"/>
	                <property-value-option value="LE"/>
	                <property-value-option value="LITERAL_INSTANCEOF"/>
	                <property-value-option value="LOR"/>
	                <property-value-option value="LT"/>
	                <property-value-option value="MINUS"/>
	                <property-value-option value="MINUS_ASSIGN"/>
	                <property-value-option value="MOD"/>
	                <property-value-option value="MOD_ASSIGN"/>
	                <property-value-option value="NOT_EQUAL"/>
	                <property-value-option value="PLUS"/>
	                <property-value-option value="PLUS_ASSIGN"/>
	                <property-value-option value="QUESTION"/>
	                <property-value-option value="SL"/>
	                <property-value-option value="SL_ASSIGN"/>
	                <property-value-option value="SR"/>
	                <property-value-option value="SR_ASSIGN"/>
	                <property-value-option value="STAR"/>
	                <property-value-option value="STAR_ASSIGN"/>
	            </enumeration>
	        </property-metadata>
	    </rule-metadata>
	    
	    <rule-metadata 
	        name="Paren Pad"
	        classname="com.puppycrawl.tools.checkstyle.checks.ParenPadCheck"
	        default-severity="Warning">
	        <description>Checks the policy on the padding of parentheses; i.e. whether a space is required after a left parenthesis and before a right parenthesis, or such spaces are forbidden.</description>
	        <property-metadata 
	            name="option" 
	            datatype="SingleSelect" 
	            default-value="nospace">
	            <description>Policy on how to pad parentheses.  nospace = do not pad (e.g. method(a, b)).  space = ensure padding (e.g. method( a, b )).</description>
	            <enumeration>
	                <property-value-option value="nospace"/>
	                <property-value-option value="space"/>
	            </enumeration>
	        </property-metadata>
	        <property-metadata 
	            name="tokens" 
	            datatype="MultiCheck" 
	            default-value="CTOR_CALL, LPAREN, METHOD_CALL, RPAREN, SUPER_CTOR_CALL, TYPECAST">
	            <description>Tokens to check.</description>
	            <enumeration>
	                <property-value-option value="CTOR_CALL"/>
	                <property-value-option value="LPAREN"/>
	                <property-value-option value="METHOD_CALL"/>
	                <property-value-option value="RPAREN"/>
	                <property-value-option value="SUPER_CTOR_CALL"/>
	                <property-value-option value="TYPECAST"/>
	            </enumeration>
	        </property-metadata>
	    </rule-metadata>
	    
	    <rule-metadata 
	        name="Tab Character"
	        classname="com.puppycrawl.tools.checkstyle.checks.TabCharacterCheck"
	        default-severity="Warning">
	        <description>Checks that there are no tab characters ('\t') in the source code.</description>
	    </rule-metadata>
	    
	    <rule-metadata 
	        name="Whitespace After"
	        classname="com.puppycrawl.tools.checkstyle.checks.WhitespaceAfterCheck"
	        default-severity="Warning">
	        <description>Checks that a token is followed by whitespace.</description>
	        <property-metadata 
	            name="tokens" 
	            datatype="MultiCheck" 
	            default-value="COMMA, SEMI, TYPECAST">
	            <description>Tokens to check.</description>
	            <enumeration>
	                <property-value-option value="COMMA"/>
	                <property-value-option value="SEMI"/>
	                <property-value-option value="TYPECAST"/>
	            </enumeration>
	        </property-metadata>
	    </rule-metadata>
	    
	    <rule-metadata 
	        name="Whitespace Around"
	        classname="com.puppycrawl.tools.checkstyle.checks.WhitespaceAroundCheck"
	        default-severity="Warning">
	        <description>Checks that a token is surrounded by whitespace.</description>
	        <property-metadata 
	            name="tokens" 
	            datatype="MultiCheck" 
	            default-value="ASSIGN, BAND, BAND_ASSIGN, BOR, BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN, EQUAL, GE, GT, LAND, LCURLY, LE, LITERAL_ASSERT, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN, LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS, MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION, RCURLY, SL, SLIST, SL_ASSIGN, SR, SR_ASSIGN, STAR, STAR_ASSIGN">
	            <description>Tokens to check.</description>
	            <enumeration>
	                <property-value-option value="ASSIGN"/>
	                <property-value-option value="BAND"/>
	                <property-value-option value="BAND_ASSIGN"/>
	                <property-value-option value="BOR"/>
	                <property-value-option value="BOR_ASSIGN"/>
	                <property-value-option value="BSR"/>
	                <property-value-option value="BSR_ASSIGN"/>
	                <property-value-option value="BXOR"/>
	                <property-value-option value="BXOR_ASSIGN"/>
	                <property-value-option value="COLON"/>
	                <property-value-option value="DIV"/>
	                <property-value-option value="DIV_ASSIGN"/>
	                <property-value-option value="EQUAL"/>
	                <property-value-option value="GE"/>
	                <property-value-option value="GT"/>
	                <property-value-option value="LAND"/>
	                <property-value-option value="LCURLY"/>
	                <property-value-option value="LE"/>
	                <property-value-option value="LITERAL_ASSERT"/>
	                <property-value-option value="LITERAL_CATCH"/>
	                <property-value-option value="LITERAL_DO"/>
	                <property-value-option value="LITERAL_ELSE"/>
	                <property-value-option value="LITERAL_FINALLY"/>
	                <property-value-option value="LITERAL_FOR"/>
	                <property-value-option value="LITERAL_IF"/>
	                <property-value-option value="LITERAL_RETURN"/>
	                <property-value-option value="LITERAL_SYNCHRONIZED"/>
	                <property-value-option value="LITERAL_TRY"/>
	                <property-value-option value="LITERAL_WHILE"/>
	                <property-value-option value="LOR"/>
	                <property-value-option value="LT"/>
	                <property-value-option value="MINUS"/>
	                <property-value-option value="MINUS_ASSIGN"/>
	                <property-value-option value="MOD"/>
	                <property-value-option value="MOD_ASSIGN"/>
	                <property-value-option value="NOT_EQUAL"/>
	                <property-value-option value="PLUS"/>
	                <property-value-option value="PLUS_ASSIGN"/>
	                <property-value-option value="QUESTION"/>
	                <property-value-option value="RCURLY"/>
	                <property-value-option value="SL"/>
	                <property-value-option value="SLIST"/>
	                <property-value-option value="SL_ASSIGN"/>
	                <property-value-option value="SR"/>
	                <property-value-option value="SR_ASSIGN"/>
	                <property-value-option value="STAR"/>
	                <property-value-option value="STAR_ASSIGN"/>
	            </enumeration>
	        </property-metadata>
	    </rule-metadata>

	</rule-group-metadata>

	<rule-group-metadata name="Modifiers">
	    
	    <rule-metadata 
	        name="Modifier Order"
	        classname="com.puppycrawl.tools.checkstyle.checks.ModifierOrderCheck"
	        default-severity="Warning">
	        <description>Checks that the order of modifiers conforms to the suggestions in the Java Language specification, sections 8.1.1, 8.3.1 and 8.4.3. The correct order is: public, protected, private, abstract, static, final, transient, volatile, synchronized, native, strictfp.</description>
	    </rule-metadata>
	    
	    <rule-metadata 
	        name="Redundant Modifier"
	        classname="com.puppycrawl.tools.checkstyle.checks.RedundantModifierCheck"
	        default-severity="Warning">
	        <description>Checks that method declarations in interfaces include neither the public modifier nor the abstract modifier (see the Java Language specification, section 9.4).  Also checks that variable declarations in interfaces include none of the following modifiers: public, static, final (variables in interface definitions are constants and have these modifiers implicitly, see the Java Language specification, section 9.3).</description>
	        <property-metadata 
	            name="tokens" 
	            datatype="MultiCheck" 
	            default-value="METHOD_DEF, VARIABLE_DEF">
	            <description>Tokens to check.</description>
	            <enumeration>
	                <property-value-option value="METHOD_DEF"/>
	                <property-value-option value="VARIABLE_DEF"/>
	            </enumeration>
	        </property-metadata>
	    </rule-metadata>
	    
	    <rule-metadata 
	        name="Visibility Modifier"
	        classname="com.puppycrawl.tools.checkstyle.checks.VisibilityModifierCheck"
	        default-severity="Warning">
	        <description>Checks visibility of class members. Only static final members may be public; other class members must be private unless property protectedAllowed or packageAllowed is set.</description>
	        <property-metadata 
	            name="packageAllowed" 
	            datatype="Boolean" 
	            default-value="false">
	            <description>Whether package visible members are allowed.</description>
	        </property-metadata>
	        <property-metadata 
	            name="protectedAllowed" 
	            datatype="Boolean" 
	            default-value="false">
	            <description>Whether protected members are allowed.</description>
	        </property-metadata>
	        <property-metadata 
	            name="publicMemberPattern" 
	            datatype="String" 
	            default-value="^serialVersionUID$">
	            <description>Pattern for public members that should be ignored.</description>
	        </property-metadata>
	    </rule-metadata>

	</rule-group-metadata>

	<rule-group-metadata name="Blocks">
	
	    <rule-metadata 
	        name="Empty Block"
	        classname="com.puppycrawl.tools.checkstyle.checks.EmptyBlockCheck"
	        default-severity="Warning">
	        <description>Checks for empty blocks.</description>
	        <property-metadata 
	            name="option" 
	            datatype="SingleSelect" 
	            default-value="statement">
	            <description>Policy on block contents. text = require that there is some text in the block.  stmt = require that there is a statement in the block.</description>
	            <enumeration>
	                <property-value-option value="text"/>
	                <property-value-option value="statement"/>
	            </enumeration>
	        </property-metadata>
	        <property-metadata 
	            name="tokens" 
	            datatype="MultiCheck" 
	            default-value="LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY, LITERAL_IF, LITERAL_FOR, LITERAL_TRY, LITERAL_WHILE, STATIC_INIT">
	            <description>Blocks to check.</description>
	            <enumeration>
	                <property-value-option value="LITERAL_CATCH"/>
	                <property-value-option value="LITERAL_DO"/>
	                <property-value-option value="LITERAL_ELSE"/>
	                <property-value-option value="LITERAL_FINALLY"/>
	                <property-value-option value="LITERAL_IF"/>
	                <property-value-option value="LITERAL_FOR"/>
	                <property-value-option value="LITERAL_TRY"/>
	                <property-value-option value="LITERAL_WHILE"/>
	                <property-value-option value="STATIC_INIT"/>
	            </enumeration>
	        </property-metadata>
	    </rule-metadata>

	    <rule-metadata 
	        name="Left Curly Brace Placement"
	        classname="com.puppycrawl.tools.checkstyle.checks.LeftCurlyCheck"
	        default-severity="Warning">
	        <description>Checks the placement of left curly braces on types, methods and other the other blocks.</description>
	        <property-metadata 
	            name="option" 
	            datatype="SingleSelect" 
	            default-value="eol">
	            <description>Defines where left curly braces should be placed.  'eol' = End-of-Line, 'nl' = New-Line, and 'nlow' = 'New-Line-on-Wrap.</description>
	            <enumeration>
	                <property-value-option value="eol"/>
	                <property-value-option value="nl"/>
	                <property-value-option value="nlow"/>
	            </enumeration>
	        </property-metadata>
	        <property-metadata 
	            name="maxLineLength" 
	            datatype="Integer" 
	            default-value="80">
	            <description>Line length for applying wrap rule.</description>
	        </property-metadata>
	        <property-metadata 
	            name="tokens" 
	            datatype="MultiCheck" 
	            default-value="CLASS_DEF, CTOR_DEF, INTERFACE_DEF, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_SWITCH, LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, METHOD_DEF">
	            <description>Blocks to check.</description>
	            <enumeration>
	                <property-value-option value="CLASS_DEF"/>
	                <property-value-option value="CTOR_DEF"/>
	                <property-value-option value="INTERFACE_DEF"/>
	                <property-value-option value="LITERAL_CATCH"/>
	                <property-value-option value="LITERAL_DO"/>
	                <property-value-option value="LITERAL_ELSE"/>
	                <property-value-option value="LITERAL_FINALLY"/>
	                <property-value-option value="LITERAL_FOR"/>
	                <property-value-option value="LITERAL_IF"/>
	                <property-value-option value="LITERAL_SWITCH"/>
	                <property-value-option value="LITERAL_SYNCHRONIZED"/>
	                <property-value-option value="LITERAL_TRY"/>
	                <property-value-option value="LITERAL_WHILE"/>
	                <property-value-option value="METHOD_DEF"/>
	            </enumeration>
	        </property-metadata>
	    </rule-metadata>
	
	    <rule-metadata 
	        name="Need Braces"
	        classname="com.puppycrawl.tools.checkstyle.checks.NeedBracesCheck"
	        default-severity="Warning">
	        <description>Checks for braces around code blocks.</description>
	        <property-metadata 
	            name="tokens" 
	            datatype="MultiCheck" 
	            default-value="LITERAL_DO, LITERAL_ELSE, LITERAL_IF, LITERAL_FOR, LITERAL_WHILE">
	            <description>Blocks to check.</description>
	            <enumeration>
	                <property-value-option value="LITERAL_DO"/>
	                <property-value-option value="LITERAL_ELSE"/>
	                <property-value-option value="LITERAL_IF"/>
	                <property-value-option value="LITERAL_FOR"/>
	                <property-value-option value="LITERAL_WHILE"/>
	            </enumeration>
	        </property-metadata>
	    </rule-metadata>

	    <rule-metadata 
	        name="Right Curly Brace Placement"
	        classname="com.puppycrawl.tools.checkstyle.checks.RightCurlyCheck"
	        default-severity="Warning">
	        <description>Checks the placement of right curly braces ('}') for else, try, and catch tokens.</description>
	        <property-metadata 
	            name="option" 
	            datatype="SingleSelect" 
	            default-value="same">
	            <description>Defines where right curly braces should be placed.  same = brace must be on the same line as the next statement.  alone = brace must be alone on the line.</description>
	            <enumeration>
	                <property-value-option value="same"/>
	                <property-value-option value="alone"/>
	            </enumeration>
	        </property-metadata>
	        <property-metadata 
	            name="tokens" 
	            datatype="MultiCheck" 
	            default-value="LITERAL_CATCH, LITERAL_ELSE, LITERAL_TRY">
	            <description>Blocks to check.</description>
	            <enumeration>
	                <property-value-option value="LITERAL_CATCH"/>
	                <property-value-option value="LITERAL_ELSE"/>
	                <property-value-option value="LITERAL_TRY"/>
	            </enumeration>
	        </property-metadata>
	    </rule-metadata>

	</rule-group-metadata>

	<rule-group-metadata name="Miscellaneous">
	
	    <rule-metadata 
	        name="Equals and HashCode"
	        classname="com.puppycrawl.tools.checkstyle.checks.EqualsHashCodeCheck"
	        default-severity="Warning">
	        <description>Checks that classes that override equals() also override hashCode().</description>
	    </rule-metadata>
	
	    <rule-metadata 
	        name="Generic Illegal Regexp"
	        classname="com.puppycrawl.tools.checkstyle.checks.GenericIllegalRegexpCheck"
	        default-severity="Warning">
	        <description>A generic check for code problems - the user can search for any pattern.  For example: exception.printStacktrace(), System.out.println(), System.exit(), etc.</description>
	        <property-metadata 
	            name="format" 
	            datatype="String" 
	            default-value="^$">
	            <description>Pattern to check for.</description>
	        </property-metadata>
	    </rule-metadata>
	
	    <rule-metadata 
	        name="Hidden Field"
	        classname="com.puppycrawl.tools.checkstyle.checks.HiddenFieldCheck"
	        default-severity="Warning">
	        <description>Checks that a local variable or a parameter does not shadow a field that is defined in the same class.</description>
	        <property-metadata 
	            name="tokens" 
	            datatype="MultiCheck" 
	            default-value="PARAMETER_DEF, VARIABLE_DEF">
	            <description>Tokens to check.</description>
	            <enumeration>
	                <property-value-option value="PARAMETER_DEF"/>
	                <property-value-option value="VARIABLE_DEF"/>
	            </enumeration>
	        </property-metadata>
	    </rule-metadata>
	
	    <rule-metadata 
	        name="Illegal Instantiation"
	        classname="com.puppycrawl.tools.checkstyle.checks.IllegalInstantiationCheck"
	        default-severity="Warning">
	        <description>Checks for illegal instantiations where a factory method is preferred.  Rationale: Depending on the project, for some classes it might be preferable to create instances through factory methods rather than calling the constructor.  A simple example is the java.lang.Boolean class. In order to save memory and CPU cycles, it is preferable to use the predefined constants TRUE and FALSE. Constructor invocations should be replaced by calls to Boolean.valueOf().  Some extremely performance sensitive projects may require the use of factory methods for other classes as well, to enforce the usage of number caches or object pools.</description>
	        <property-metadata 
	            name="classes" 
	            datatype="String" 
	            default-value="{}">
	            <description>Comman seperated list of classes that should not be instantiated.</description>
	        </property-metadata>
	    </rule-metadata>
	
	    <rule-metadata 
	        name="Inner Assignment"
	        classname="com.puppycrawl.tools.checkstyle.checks.InnerAssignmentCheck"
	        default-severity="Warning">
	        <description>Checks for assignments in subexpressions, such as in "String s = Integer.toString(i = 2);".  Rationale: With the exception of for iterators, all assignments should occur in their own toplevel statement to increase readability. With inner assignments like the above it is difficult to see all places where a variable is set.</description>
	        <property-metadata 
	            name="tokens" 
	            datatype="MultiCheck" 
	            default-value="ASSIGN, BAND_ASSIGN, BOR_ASSIGN, BSR_ASSIGN, BXOR_ASSIGN, DIV_ASSIGN, MINUS_ASSIGN, MOD_ASSIGN, PLUS_ASSIGN, SL_ASSIGN, SR_ASSIGN, STAR_ASSIGN">
	            <description>Tokens to check.</description>
	            <enumeration>
	                <property-value-option value="ASSIGN"/>
	                <property-value-option value="BAND_ASSIGN"/>
	                <property-value-option value="BOR_ASSIGN"/>
	                <property-value-option value="BSR_ASSIGN"/>
	                <property-value-option value="BXOR_ASSIGN"/>
	                <property-value-option value="DIV_ASSIGN"/>
	                <property-value-option value="MINUS_ASSIGN"/>
	                <property-value-option value="MOD_ASSIGN"/>
	                <property-value-option value="PLUS_ASSIGN"/>
	                <property-value-option value="SL_ASSIGN"/>
	                <property-value-option value="SR_ASSIGN"/>
	                <property-value-option value="STAR_ASSIGN"/>
	            </enumeration>
	        </property-metadata>
	    </rule-metadata>
	
	    <rule-metadata 
	        name="Simplify Boolean Expression"
	        classname="com.puppycrawl.tools.checkstyle.checks.SimplifyBooleanExpressionCheck"
	        default-severity="Warning">
	        <description>Checks for overly complicated boolean expressions. Currently finds code like if (b == true), b || true, !false, etc.</description>
	    </rule-metadata>
	
	    <rule-metadata 
	        name="Todo Comment"
	        classname="com.puppycrawl.tools.checkstyle.checks.TodoCommentCheck"
	        default-severity="Warning">
	        <description>A check for TODO: comments. Actually it is a generic regular expression matcher on Java comments. To check for other patterns in Java comments, set property format.</description>
	        <property-metadata 
	            name="format" 
	            datatype="String" 
	            default-value="TODO:">
	            <description>Regular expression definging pattern to look for.</description>
	        </property-metadata>
	    </rule-metadata>
	
	    <rule-metadata 
	        name="Upper Ell"
	        classname="com.puppycrawl.tools.checkstyle.checks.UpperEllCheck"
	        default-severity="Warning">
	        <description>Checks that long constants are defined with an upper ell. That is ' L' and not 'l'. This is in accordance to the Java Language Specification, Section 3.10.1.  Rationale: The lower case letter l looks a lot like the digit 1.</description>
	    </rule-metadata>

	</rule-group-metadata>
		
</checkstyle-metadata>